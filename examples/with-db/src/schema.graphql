### This file was autogenerated by Nexus 0.9.11
### Do not make changes to this file directly


type AggregateDog {
  count: Int!
}

type Cat {
  id: ID!
  name: String!
}

input CatCreateInput {
  name: String!
}

enum CatOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input CatUpdateInput {
  name: String
}

input CatWhereInput {
  AND: [CatWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [CatWhereInput!]
  OR: [CatWhereInput!]
}

input CatWhereUniqueInput {
  id: ID
}

type Dinosaure {
  id: ID!
}

enum DinosaureOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input DinosaureWhereInput {
  AND: [DinosaureWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [DinosaureWhereInput!]
  OR: [DinosaureWhereInput!]
}

input DinosaureWhereUniqueInput {
  id: ID
}

type Dog {
  id: ID!
}

type DogConnection {
  aggregate: AggregateDog!
  edges: [DogEdge!]!
  pageInfo: PageInfo!
}

type DogEdge {
  cursor: String!
  node: Dog!
}

enum DogOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input DogWhereInput {
  AND: [DogWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [DogWhereInput!]
  OR: [DogWhereInput!]
}

input DogWhereUniqueInput {
  id: ID
}

type Meal {
  id: ID!
}

enum MealOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input MealWhereInput {
  AND: [MealWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [MealWhereInput!]
  OR: [MealWhereInput!]
}

input MealWhereUniqueInput {
  id: ID
}

type Mutation {
  createCat(data: CatCreateInput!): Cat!
  createDraft(authorEmail: String!, content: String!, title: String!): Post!
  deleteCat(where: CatWhereUniqueInput!): Cat
  deletePost(id: ID!): Post
  publish(id: ID!): Post!
  signupUser(email: String!, name: String!): User!
  updateCat(data: CatUpdateInput!, where: CatWhereUniqueInput!): Cat
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Post {
  author: User!
  content: String!
  id: ID!
  published: Boolean!
  title: String!
}

enum PostOrderByInput {
  content_ASC
  content_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  published_ASC
  published_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input PostWhereInput {
  AND: [PostWhereInput!]
  author: UserWhereInput
  content: String
  content_contains: String
  content_ends_with: String
  content_gt: String
  content_gte: String
  content_in: [String!]
  content_lt: String
  content_lte: String
  content_not: String
  content_not_contains: String
  content_not_ends_with: String
  content_not_in: [String!]
  content_not_starts_with: String
  content_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  published: Boolean
  published_not: Boolean
  title: String
  title_contains: String
  title_ends_with: String
  title_gt: String
  title_gte: String
  title_in: [String!]
  title_lt: String
  title_lte: String
  title_not: String
  title_not_contains: String
  title_not_ends_with: String
  title_not_in: [String!]
  title_not_starts_with: String
  title_starts_with: String
}

type Query {
  cat(where: CatWhereUniqueInput!): Cat
  cats(after: String, before: String, first: Int, last: Int, orderBy: CatOrderByInput, skip: Int, where: CatWhereInput): [Cat!]!
  dinosaure(where: DinosaureWhereUniqueInput!): Dinosaure
  dinosaures(after: String, before: String, first: Int, last: Int, orderBy: DinosaureOrderByInput, skip: Int, where: DinosaureWhereInput): [Dinosaure!]!
  dog(where: DogWhereUniqueInput!): Dog
  dogs(after: String, before: String, first: Int, last: Int, orderBy: DogOrderByInput, skip: Int, where: DogWhereInput): [Dog!]!
  dogsConnection(after: String, before: String, first: Int, last: Int, orderBy: DogOrderByInput, skip: Int, where: DogWhereInput): DogConnection!
  feed: [Post!]!
  filterPosts(searchString: String!): [Post!]!
  meal(where: MealWhereUniqueInput!): Meal
  meals(after: String, before: String, first: Int, last: Int, orderBy: MealOrderByInput, skip: Int, where: MealWhereInput): [Meal!]!
  test(where: TestWhereUniqueInput!): Test
  tests(after: String, before: String, first: Int, last: Int, orderBy: TestOrderByInput, skip: Int, where: TestWhereInput): [Test!]!
  titi(where: TitiWhereUniqueInput!): Titi
  titis(after: String, before: String, first: Int, last: Int, orderBy: TitiOrderByInput, skip: Int, where: TitiWhereInput): [Titi!]!
  toto(where: TotoWhereUniqueInput!): Toto
  totoes(after: String, before: String, first: Int, last: Int, orderBy: TotoOrderByInput, skip: Int, where: TotoWhereInput): [Toto!]!
}

type Test {
  id: ID!
}

enum TestOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input TestWhereInput {
  AND: [TestWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [TestWhereInput!]
  OR: [TestWhereInput!]
}

input TestWhereUniqueInput {
  id: ID
}

type Titi {
  id: ID!
}

enum TitiOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input TitiWhereInput {
  AND: [TitiWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [TitiWhereInput!]
  OR: [TitiWhereInput!]
}

input TitiWhereUniqueInput {
  id: ID
}

type Toto {
  id: ID!
}

enum TotoOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input TotoWhereInput {
  AND: [TotoWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [TotoWhereInput!]
  OR: [TotoWhereInput!]
}

input TotoWhereUniqueInput {
  id: ID
}

type User {
  email: String!
  id: ID!
  name: String!
  posts(after: String, before: String, first: Int, last: Int, orderBy: PostOrderByInput, skip: Int, where: PostWhereInput): [Post!]
}

input UserWhereInput {
  AND: [UserWhereInput!]
  email: String
  email_contains: String
  email_ends_with: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_ends_with: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  posts_every: PostWhereInput
  posts_none: PostWhereInput
  posts_some: PostWhereInput
}
